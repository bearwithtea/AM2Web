{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/owenmcgrath/Library/Mobile%20Documents/com~apple~CloudDocs/Home/Personal/Software%20Engineering/AM2Web/am2web/src/app/utils/logging.ts"],"sourcesContent":["import { createLogger, format, transports } from 'winston';\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.combine(\n    format.timestamp(),\n    format.simple()\n  ),\n  transports: [\n    new transports.Console()\n  ],\n});\n\nexport default logger;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,CAAA,GAAA,2IAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,OAAO;IACP,QAAQ,2IAAA,CAAA,SAAM,CAAC,OAAO,CACpB,2IAAA,CAAA,SAAM,CAAC,SAAS,IAChB,2IAAA,CAAA,SAAM,CAAC,MAAM;IAEf,YAAY;QACV,IAAI,2IAAA,CAAA,aAAU,CAAC,OAAO;KACvB;AACH;uCAEe","debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///Users/owenmcgrath/Library/Mobile%20Documents/com~apple~CloudDocs/Home/Personal/Software%20Engineering/AM2Web/am2web/src/app/api/parse-xml/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { parseStringPromise } from \"xml2js\";\nimport logging from \"../../utils/logging\";\n\nfunction parseSongs(parsed: any) {\n  try {\n    logging.info(\"[INFO] - Starting parseSongs\");\n    logging.info(`[DEBUG] - parsed object keys: ${Object.keys(parsed)}`);\n\n    if (!parsed.plist) {\n      logging.error(\"[ERROR] - 'plist' key missing in parsed object\");\n      return [];\n    }\n    logging.info(`[DEBUG] - parsed.plist keys: ${Object.keys(parsed.plist)}`);\n\n    if (!parsed.plist.dict) {\n      logging.error(\"[ERROR] - 'dict' key missing in parsed.plist\");\n      return [];\n    }\n    const dictObj = parsed.plist.dict;\n    logging.info(\n      `[VERBOSE] - parsed.plist.dict: ${JSON.stringify(dictObj, null, 2)}`\n    );\n\n    // Find the index of \"Tracks\" in the key array\n    const tracksKeyIndex = dictObj.key?.findIndex(\n      (k: string) => k === \"Tracks\"\n    );\n    logging.info(`[DEBUG] - tracksKeyIndex: ${tracksKeyIndex}`);\n\n    if (\n      tracksKeyIndex === -1 ||\n      !dictObj.dict ||\n      !dictObj.dict[tracksKeyIndex]\n    ) {\n      logging.error(\n        \"[ERROR] - 'Tracks' key not found or no corresponding dict value\"\n      );\n      return [];\n    }\n\n    // The actual tracks dictionary\n    const tracksDict = dictObj.dict[tracksKeyIndex];\n    logging.info(`[DEBUG] - tracksDict keys: ${Object.keys(tracksDict)}`);\n\n    for (const trackId in tracksDict) {\n      const trackData = tracksDict[trackId];\n\n      if (!trackData || !trackData.key) {\n        logging.error(`[ERROR] - Track ${trackId} missing 'key' property`);\n        continue;\n      }\n\n      const keys = trackData.key;\n      let title: string | undefined = undefined;\n\n      for (let i = 0; i < keys.length; i++) {\n        if (keys[i] === \"Name\") {\n          if (trackData.string && trackData.string[i] !== undefined) {\n            title = trackData.string[i];\n          }\n          break;\n        }\n      }\n\n      if (title) {\n        logging.info(`[INFO] - Track ${trackId} title: ${title}`);\n      } else {\n        logging.error(`[ERROR] - Track ${trackId} has no title`);\n      }\n    }\n\n    logging.info(`[INFO] - Finished parsing all tracks.`);\n    return [];\n  } catch (err) {\n    logging.error(\"[ERROR] - Exception in parseSongs\", err);\n    return [];\n  }\n}\n\nlogging.info(\"[INFO] - XML parsing module initialized\");\nexport async function POST(req: NextRequest) {\n  logging.info(\"[INFO] - Received POST request\");\n  const xml = await req.text();\n  logging.info(`[DEBUG] - Received XML length: ${xml.length}`);\n\n  try {\n    const result = await parseStringPromise(xml, { explicitArray: false });\n    logging.info(\"[INFO] - XML parsed successfully\");\n    logging.info(`[DEBUG] - Top-level parsed keys: ${Object.keys(result)}`);\n    const songs = parseSongs(result);\n    logging.info(`[INFO] - Returning response with ${songs.length} songs`);\n    return NextResponse.json(songs);\n  } catch (error) {\n    logging.error(\"[ERROR] - Failed to parse XML\", error);\n    return NextResponse.json(\n      { error: \"Failed to parse XML\", details: error },\n      { status: 400 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}