{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/owenmcgrath/Library/Mobile%20Documents/com~apple~CloudDocs/Home/Personal/Software%20Engineering/AM2Web/am2web/src/app/utils/logging.ts"],"sourcesContent":["import { createLogger, format, transports } from 'winston';\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.combine(\n    format.timestamp(),\n    format.simple()\n  ),\n  transports: [\n    new transports.Console()\n  ],\n});\n\nexport default logger;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,CAAA,GAAA,2IAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,OAAO;IACP,QAAQ,2IAAA,CAAA,SAAM,CAAC,OAAO,CACpB,2IAAA,CAAA,SAAM,CAAC,SAAS,IAChB,2IAAA,CAAA,SAAM,CAAC,MAAM;IAEf,YAAY;QACV,IAAI,2IAAA,CAAA,aAAU,CAAC,OAAO;KACvB;AACH;uCAEe","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///Users/owenmcgrath/Library/Mobile%20Documents/com~apple~CloudDocs/Home/Personal/Software%20Engineering/AM2Web/am2web/src/app/api/parse-xml/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport plist from \"simple-plist\";\nimport logging from \"../../utils/logging\";\nimport fs from \"fs\";\n\n/**\n * POST /api/parse-xml\n * Receives an Apple Music/iTunes XML library file as the request body,\n * parses it using simple-plist, and returns an array of song titles.\n * Logs every major step and error for debugging and traceability.\n */\nexport async function POST(req: NextRequest) {\n  logging.info(\"[INFO] - Received POST request to /api/parse-xml\");\n\n  //save uploaded XML to a temporary file for parsing\n  const xml = await req.text();\n  logging.info(`[DEBUG] - Received XML length: ${xml.length}`);\n  const tempPath = \"/tmp/library.xml\";\n  fs.writeFileSync(tempPath, xml);\n  logging.info(`[DEBUG] - XML written to temporary file: ${tempPath}`);\n\n  try {\n    //parse the XML file using simple-plist\n    const data = plist.readFileSync(tempPath) as any;\n    logging.info(\"[INFO] - Parsed plist file successfully\");\n\n    //access the Tracks dictionary\n    const tracks = data.Tracks;\n    if (!tracks || typeof tracks !== \"object\") {\n      logging.error(\"[ERROR] - No 'Tracks' dictionary found in plist file\");\n      return NextResponse.json(\n        { error: \"No 'Tracks' found in plist file\" },\n        { status: 400 }\n      );\n    }\n    logging.info(`[DEBUG] - Found ${Object.keys(tracks).length} tracks`);\n\n    //collect song titles and log each track\n    let titles: string[] = [];\n    for (const trackId in tracks) {\n      const track = tracks[trackId];\n      if (track.Name) {\n        logging.info(`[INFO] - Track ${trackId} title: ${track.Name}`);\n        titles.push(track.Name);\n      } else {\n        logging.error(`[ERROR] - Track ${trackId} has no title`);\n      }\n    }\n\n    logging.info(`[INFO] - Finished parsing all tracks. Total titles: ${titles.length}`);\n    return NextResponse.json({ titles });\n  } catch (err) {\n    logging.error(\"[ERROR] - Exception in parseSongsFromPlistFile\", err);\n    return NextResponse.json(\n      { error: \"Failed to parse plist\", details: err },\n      { status: 400 }\n    );\n  } finally {\n    //clean up the temporary file\n    try {\n      fs.unlinkSync(tempPath);\n      logging.info(`[DEBUG] - Temporary file deleted: ${tempPath}`);\n    } catch (cleanupErr) {\n      logging.error(\"[ERROR] - Failed to delete temporary file\", cleanupErr);\n    }\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAQO,eAAe,KAAK,GAAgB;IACzC,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC;IAEb,mDAAmD;IACnD,MAAM,MAAM,MAAM,IAAI,IAAI;IAC1B,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,+BAA+B,EAAE,IAAI,MAAM,EAAE;IAC3D,MAAM,WAAW;IACjB,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU;IAC3B,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,yCAAyC,EAAE,UAAU;IAEnE,IAAI;QACF,uCAAuC;QACvC,MAAM,OAAO,kJAAA,CAAA,UAAK,CAAC,YAAY,CAAC;QAChC,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC;QAEb,8BAA8B;QAC9B,MAAM,SAAS,KAAK,MAAM;QAC1B,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;YACzC,gIAAA,CAAA,UAAO,CAAC,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QACA,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,OAAO,IAAI,CAAC,QAAQ,MAAM,CAAC,OAAO,CAAC;QAEnE,wCAAwC;QACxC,IAAI,SAAmB,EAAE;QACzB,IAAK,MAAM,WAAW,OAAQ;YAC5B,MAAM,QAAQ,MAAM,CAAC,QAAQ;YAC7B,IAAI,MAAM,IAAI,EAAE;gBACd,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,QAAQ,QAAQ,EAAE,MAAM,IAAI,EAAE;gBAC7D,OAAO,IAAI,CAAC,MAAM,IAAI;YACxB,OAAO;gBACL,gIAAA,CAAA,UAAO,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,QAAQ,aAAa,CAAC;YACzD;QACF;QAEA,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,oDAAoD,EAAE,OAAO,MAAM,EAAE;QACnF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,KAAK;QACZ,gIAAA,CAAA,UAAO,CAAC,KAAK,CAAC,kDAAkD;QAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAyB,SAAS;QAAI,GAC/C;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,6BAA6B;QAC7B,IAAI;YACF,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC;YACd,gIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,kCAAkC,EAAE,UAAU;QAC9D,EAAE,OAAO,YAAY;YACnB,gIAAA,CAAA,UAAO,CAAC,KAAK,CAAC,6CAA6C;QAC7D;IACF;AACF","debugId":null}}]
}